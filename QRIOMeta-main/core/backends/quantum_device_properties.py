# These are the average two qubit gate errors for the devices generated using backend_generator.py The device files are in Quantum_devices
# data = [
#     0.7837353647192056, 0.7727257828932964, 0.7314882434461607, 0.1660803798338414,
#     0.6468012750404156, 0.3539532858798993, 0.6742811952836105, 0.40038516775767585,
#     0.1160201715269254, 0.6619364512007777, 0.19881217898707335, 0.5821201360373413,
#     0.7801083681030909, 0.5548093098291569, 0.35309840208954496, 0.18932953014754786,
#     0.665441690778585, 0.7853750423162859, 0.24309588454942796, 0.8185485051896098,
#     0.5400471189595465, 0.14090879996309352, 0.8677812531723202, 0.8417944207431804,
#     0.05454831451956044, 0.5979949734537202, 0.5232037107400305, 0.7186239622799132,
#     0.4673802181336603, 0.8583347416044059, 0.6583271174225528, 0.6979562704333648,
#     0.598286587493601, 0.10887527155565715, 0.22360989618695523, 0.37323097872583966,
#     0.3897980502534715, 0.5302320437459204, 0.33489169395521257, 0.625169643718599,
#     0.40930884669918394, 0.720586844147001, 0.13216649828289254, 0.7922795639011833,
#     0.15827289797374522, 0.3199493304410494, 0.8558419706313678, 0.4665412031534251,
#     0.6403379493351941, 0.2223883356708228, 0.03810814380671805, 0.326640208839585,
#     0.3943579594347543, 0.6064490552972436, 0.4475680319637946, 0.4541866284672109,
#     0.8599843262601016, 0.022677973996153098, 0.6760720677666857, 0.3803287095373358,
#     0.7889032748616702, 0.3732320142364258, 0.5776008201765938, 0.21716698758581204,
#     0.6625714364957325, 0.44792381159284184, 0.7142469315983404, 0.7110076790970334,
#     0.5359502940108741, 0.7337816198040618, 0.8034503123199594, 0.20283233421415459,
#     0.34059979565382414, 0.7038541704362266, 0.5054497623187819, 0.6563855174620774,
#     0.09395161285299335, 0.3544040191467043, 0.4240118120022844, 0.2569375168934127,
#     0.8947019336022525, 0.07010431093705251, 0.7360517480623989, 0.8478548787773317,
#     0.7318451689952904, 0.5949173427608062, 0.6102611242153654, 0.5819719662242716,
#     0.19837507730392573, 0.8899332528312364, 0.5105127150302771, 0.6091683154029985,
#     0.7572270398466179, 0.6378363758276675, 0.19827912967199673, 0.7534903079181686,
#     0.31534097705819625, 0.04712661607115337, 0.8181144670182927, 0.07973163564386436
# ]
data = [
    0.05235060260874595,
    0.8385794722073481,
    0.8526871460055426,
    0.8195514056140689,
    0.682999630382921,
    0.011866374693441203,
    0.2855724981088303,
    0.6394499366583949,
    0.5891716025257783,
    0.6831614313801156,
    0.41315493812991777,
    0.48681596723471715,
    0.7426777739243496,
    0.13366873673257992,
    0.3132201976782512,
    0.08430438812286513,
    0.5541707612545892,
    0.6128026182226978,
    0.7018760827127339,
    0.6387120015997083,
    0.12695185958558533,
    0.4284001411709876,
    0.33808683806114426,
    0.06030724186820497,
    0.8130306872296983,
    0.07421537953360095,
    0.06287512194182174,
    0.6682378512023097,
    0.3064141717681358,
    0.1846647462717481,
    0.10518591643286646,
    0.8402552542181047,
    0.10148519970420194,
    0.5850440183790444,
    0.8253716398124358,
    0.7756802292805259,
    0.09806148346213692,
    0.03969984802238268,
    0.5242620764632091,
    0.2506274184674695,
    0.49394557242011244,
    0.6860001428840202,
    0.0059814413704591405,
    0.5606842424573564,
    0.19146983932793576,
    0.6727654425814396,
    0.2731360096184784,
    0.23748675673046304,
    0.053619691540209596,
    0.2588240300243318,
    0.8606926435115442,
    0.4697236247707307,
    0.7331064367352611,
    0.28051877877715814,
    0.677043427480336,
    0.530608270400712,
    0.7786627644615292,
    0.7941816604031777,
    0.49160281146233636,
    0.2264251585587008,
    0.18387347301044776,
    0.31375147018113164,
    0.40288374947649497,
    0.7125346226731601,
    0.4602094338460371,
    0.3589997026627051,
    0.17581100449861936,
    0.680067564327367,
    0.4678153090128042,
    0.8712806888849891,
    0.48921109086707354,
    0.4863662324123148,
    0.0700595048863715,
    0.35010755730895404,
    0.5688111953633388,
    0.021995854583273945,
    0.2399015308593955,
    0.6174669375774803,
    0.5515393106302036,
    0.57031493864983,
    0.07064794555469713,
    0.7198744312653808,
    0.17340079905599526,
    0.347044624067601,
    0.28162544158124464,
    0.31142805024701775,
    0.774083451820282,
    0.006940401846131792,
    0.5998390395521918,
    0.470907147181222,
    0.532754888479658,
    0.521025181554342,
    0.4904076937292787,
    0.42246929364138935,
    0.6285134116369196,
    0.7377251478188779,
    0.688838099416409,
    0.27865094919712385,
    0.22720433004263935,
    0.6211032848567727
]


# Calculate the average
average = sum(data) / len(data)

# Calculate the median
sorted_data = sorted(data)
n = len(sorted_data)
if n % 2 == 0:
    median = (sorted_data[n//2 - 1] + sorted_data[n//2]) / 2
else:
    median = sorted_data[n//2]

average, median
print("Average ", average)
print("Median ", median)
print("Max", max(data))
print("Min", min(data))